<<extract-ranges>>=
# import genus grid cells for both raw Spalding realms and for central
# and western Indo-Pacific merged, create a column of labels, and merge
extract_ranges <- function() {
  load("../data/genus_cells.rda")
  Spalding_raw <- genus_cells
  provinces <- rep("Modern_raw",length(Spalding_raw[,1]))
  Spalding_raw <- data.frame(Spalding_raw,provinces)
  load("../data/genus_cells_alt.rda")
  Spalding_merged <- genus_cells_alt
  provinces <- rep("Modern_merged",length(Spalding_merged[,1]))
  Spalding_merged <- data.frame(Spalding_merged,provinces)
  genus_grid_merged <- rbind(Spalding_raw,Spalding_merged)
  colnames(genus_grid_merged) <- c("genus", "num_cells", "long_mid",
    "lat_mid", "provinces")
  occs <- read.csv("../data/OBIS_genus_occurrences.csv", header=TRUE)
  genus <- occs$genus
  occ.freq <- occs$total_occurrences
  occ.merge <- data.frame(genus,occ.freq)
  genus_grid_merged2 <- merge(genus_grid_merged, occ.merge, by="genus")
  save(genus_grid_merged2, file="../data/genus_grid_merged.rda")

  # Now merge in higher taxonomy
  OBIS.genera <- genus_grid_merged2
  genus.Matches <- read.csv("../data/modern-genera-matchtaxa.csv", header = TRUE)
  OBIS.for.plot <- merge(OBIS.genera,genus.Matches,by.x = "genus",all.x = FALSE)
  save(OBIS.for.plot,file = "../data/OBIS.for.plot_rare_removed.rda")

  # Now extract range parameters from the OBIS data

  # Load required packages:
  library(fields)
  library(plyr)
  library(PBSmapping)
  library(gdata)

  latitude <- round(OBIS.for.plot$lat_mid)
  longitude <- round(OBIS.for.plot$long_mid)
  LongLat <- paste(round(longitude,2),"_",round(latitude,2),sep="")
  genus <- OBIS.for.plot$genus
  Spalding.version <- OBIS.for.plot$provinces
  richness <- OBIS.for.plot$Richness
  class <- OBIS.for.plot$class
  occurrences <- OBIS.for.plot$occ.freq
  MatchTaxon <- OBIS.for.plot$NewMatchTaxon

  OBIS.grid.2 <- unique(data.frame(Spalding.version,class,MatchTaxon,
      genus,occurrences,richness,latitude,longitude,LongLat))
  OBIS.grid.2$Interval <- rep(0,length(OBIS.grid.2[,1]))
  OBIS.grid.2$class <- as.character(OBIS.grid.2$class)
  OBIS.grid.2$class <- ifelse(OBIS.grid.2$class == "Malacostraca",
    "Decapoda", OBIS.grid.2$class)

  # Load the equal-area grid:
  load("../data/global_45x14.rda")
  LatSeq <- global_45x14$latitude
  LongSeq <- global_45x14$longitude
  polys<- PBSmapping::makeGrid (x=round(LongSeq,0),
    y=round(LatSeq,0), projection="UTM")

  # To be safe, remove occurrences that fall off of the equal-area grid:
  OBIS.grid.2 <- OBIS.grid.2[(OBIS.grid.2$latitude < 82) &
    (OBIS.grid.2$latitude > -75) ,]

  # Make the function to extract ranges:
  ranges <- function(df){
    if(length(na.omit(df$latitude))>1){
      events <- data.frame(EID=1:length(df$latitude),
        X = as.numeric(as.vector(df$longitude)),
        Y=as.numeric(as.vector(df$latitude)))
      events <- PBSmapping::as.EventData(na.omit(events),
        projection='UTM')
      fc <- PBSmapping::findCells(events, polys)
      richness <- mean(unique(drop.levels(df$richness)))
      eac <-length(unique(subset(fc,select=c(PID,SID)))[,1])
      gcd <-max(fields::rdist.earth(events[,2:3], mile = TRUE))
      MaxLat <- max(df$latitude)
      MinLat <- min(df$latitude)
      MaxAbsLat <- max(abs(df$latitude))
      MinAbsLat <- min(abs(df$latitude))
      MeanAbsLat <- mean(abs(df$latitude))
      occurrences <- mean(df$occurrences)
      Ex <- 0}
    else{
      eac=1
      gcd=1
      richness <- mean(unique(drop.levels(df$richness)))
      MaxLat <- max(df$latitude)
      MinLat <- min(df$latitude)
      MaxAbsLat <- max(abs(df$latitude))
      MinAbsLat <- min(abs(df$latitude))
      MeanAbsLat <- mean(abs(df$latitude))
      occurrences <- mean(df$occurrences)
      Ex <- 0}
    return(data.frame(occurrences,eac,gcd,richness,
        MaxAbsLat,MinAbsLat,MeanAbsLat,Ex))
  }

  # Apply it to the modern range data:
  byGenus.OBIS <- ddply(OBIS.grid.2,
    .(Spalding.version,Interval,class,MatchTaxon,genus),
    ranges, .progress="text")

  # byGenus.OBIS.list <- summarise(group_by(tbl_df(OBIS.grid.2[1:6000,]),
  #     Spalding.version, Interval, class, MatchTaxon, genus), ranges)
  # byGenus.OBIS <- rbind_all(byGenus.OBIS.list)
  # rm(byGenus.OBIS.list)

  colnames(byGenus.OBIS) <- c("Interval","top","class","group","genus",
    "occurrences","eac","gcd","richness","MaxAbsLat","MinAbsLat",
    "MeanAbsLat","Ex")
  write.table(byGenus.OBIS, "../data/OBIS.ranges.processed.csv", sep = ",")

  ################# now process PaleoDB data   #################

  # The first step is to read in the PBDB data and do a bunch of processing to
  # standardize the taxonomic names and the time bins.  This can probably be
  # cleaned up substantially before a final submission

  # read in csv file and convert to rda
  #pbdb <- read.csv('~/Dropbox/nescent_extinction_map/data/PaleoDB downloads/4.6.2014/4.6.2014.occs.csv')
  #save(pbdb,file='~/Dropbox/nescent_extinction_map/data/PaleoDB downloads/4.6.2014/4.6.2014.occs.rda')

  load('~/Dropbox/nescent_extinction_map/data/PaleoDB downloads/4.6.2014/4.6.2014.occs.rda')
  
  ### redefine Plio-Pleistocene FR_2 Bin
  pbdb$FR2_bin <- ifelse(pbdb$interval_base <= 5.333 & pbdb$interval_top >= .0117,"Plio-Pleistocene",as.character(pbdb$FR2_bin))

  #define the stages we want to use, for reference
  stage <- c("Plio-Pleistocene","Upper Miocene","Middle Miocene","Lower Miocene")
  top <- c(.0117,5.333,11.608,15.97)
  bottom <- c(5.333,11.608,15.97,23.03)
  stage.dates <- data.frame(stage,bottom,top)

  ### create a column of stage names
pbdb$stage <- ifelse(pbdb$interval_base <= 5.333 & pbdb$interval_top >= .0117,"Plio-Pleistocene", 
                     ifelse(pbdb$interval_base <= 11.608 & pbdb$interval_top >= 5.333,"Upper Miocene",
                            ifelse(pbdb$interval_base <= 15.97 & pbdb$interval_top >= 11.608,"Middle Miocene",
                                   ifelse(pbdb$interval_base <= 23.03 & pbdb$interval_top >= 15.97,"Lower Miocene",NA))))

  ### drop unmatched rows
  pbdb<- pbdb[-which(is.na(pbdb$stage)), ]

  ### drop any name without a taxon #
  pbdb <- pbdb[!(is.na(pbdb$taxon_no) | pbdb$taxon_no==0), ]

  ##merge in interval tops and bottoms
  pbdb <- merge(pbdb,stage.dates,by="stage")

  ### make column of class-genus to avoid mixing up different groups
  pbdb$clgen <- paste(pbdb$class_name,pbdb$occurrence.genus_name)

  ### extract apparent extinction dates of genera
  gen.LA <- function(df) min(df$top)
  gen.LAs <- ddply(pbdb,.(clgen),each(gen.LA),.progress="text")

  ### merge back in and add row to indicate extinction in LA bin if the genus is not listed as extant
  pbdb <- merge(pbdb,gen.LAs,by="clgen")

  pbdb$Extinct.in.bin <- ifelse(pbdb$top == pbdb$gen.LA & pbdb$genus_extant != "yes",1,0)

  # Okay, this next step is a bit of a kludge.  Automating all of the
  # taxonomic processing that went into the first file is going to take some time.
  # So instead what I'll do here is take the older version, match those taxonomic
  # groups to these based on shared genus names, and then apply these groups to
  # any genera with matching higher taxonomy. So a genus that wasn't in the
  # original download will be dropped UNLESS it belongs to a family or order than
  # had already been placed within in a group.  For the final version, this step
  # should be eliminated.

  pbdb.gen.cats <- read.csv("../data/PBDB.genera.Groups.csv",header=TRUE)

  pbdb.gen <- data.frame(pbdb$class_name,pbdb$order_name,
    pbdb$family_name, pbdb$occurrence.genus_name)
  colnames(pbdb.gen) <- c("class","order","family","Genus")

  pbdb.cats <- merge(pbdb.gen,pbdb.gen.cats,by="Genus",all=FALSE)

  ### make table show family-level and higher matches to our categories
  pbdb.fams <- na.omit(unique(data.frame(pbdb.cats$family,pbdb.cats$Group)))
  colnames(pbdb.fams) <- c("family","family.Group")
  pbdb.fams <- pbdb.fams[!(is.na(pbdb.fams$family) | pbdb.fams$family==""), ]

  pbdb.gen <- data.frame(pbdb.gen.cats$Group,pbdb.gen.cats$Genus)
  colnames(pbdb.gen) <- c("genus.Group","occurrence.genus_name")


  pbdb$order.Group <- ifelse(pbdb$class_name == "Chondrichthyes",
    "Elasmobranchii_Elasmobranchii",
    ifelse(pbdb$order_name == "Decapoda","Decapoda_Decapoda",
      ifelse(pbdb$order_name == "Testudines","Testudines_Testudines",
        "none")))

  pbdb <- merge(pbdb,pbdb.fams,by.x="family_name",by.y="family",all.x=FALSE, all.y=FALSE)
  pbdb <- merge(pbdb,pbdb.gen,by="occurrence.genus_name",all.x=FALSE, all.y=FALSE)

  levels(pbdb$order.Group) <- c(levels(pbdb$order.Group), "none")
  levels(pbdb$family.Group) <- c(levels(pbdb$family.Group), "none")
  levels(pbdb$genus.Group) <- c(levels(pbdb$genus.Group), "none")

  pbdb$order.Group[is.na(pbdb$order.Group)] <- "none"
  pbdb$family.Group[is.na(pbdb$family.Group)] <- "none"
  pbdb$genus.Group[is.na(pbdb$genus.Group)] <- "none"
  pbdb$order.Group <- as.character(pbdb$order.Group)
  pbdb$family.Group <- as.character(pbdb$family.Group)
  pbdb$genus.Group <- as.character(pbdb$genus.Group)

  pbdb$Group <- ifelse(pbdb$genus.Group != "none",
    pbdb$genus.Group,ifelse(pbdb$family.Group != "none",
      pbdb$family.Group, pbdb$order.Group))

  pbdb <- pbdb[!(pbdb$Group =="none"),]

  taxa <- strsplit(pbdb$Group, "_")
  taxa2 <- ldply(taxa)
  colnames(taxa2) <- c("class", "order")

  pbdb <- data.frame(pbdb,taxa2)

  ### to be safe, remove occurrences that fall off of the equal-area grid
  pbdb <- pbdb[(pbdb$paleolatdec  < 82) & (pbdb$paleolatdec  > -75) ,]


  # Okay, now, define a new function, slightly different, for extracting
  # geographic range parameters.  Different because the column names are different
  # in OBIS vs. PBDB and because OBIS species richness numbers had to calculated
  # independently because we have only genus names in the interpolated range data

  ranges <- function(df) {
    if (length(na.omit(df$paleolatdec)) > 1) {
      events <- data.frame(EID = 1:length(df$paleolatdec),
        X = as.numeric(as.vector(df$paleolngdec)),
        Y = as.numeric(as.vector(df$paleolatdec)))
      events <- PBSmapping::as.EventData(na.omit(events), projection = "UTM")
      fc <- findCells(events, polys)
      richness <- length(unique(df$occurrence.species_name))
      eac <- length(unique(subset(fc, select = c(PID, SID)))[,
        1])
    gcd <- max(rdist.earth(events[, 2:3], mile = TRUE))
    MaxLat <- max(df$paleolatdec)
    MinLat <- min(df$paleolatdec)
    MaxAbsLat <- max(abs(df$paleolatdec))
    MinAbsLat <- min(abs(df$paleolatdec))
    MeanAbsLat <- mean(abs(df$paleolatdec))
    occurrences <- length(df$paleolatdec)
    Ex <- max(df$Extinct.in.bin)
    }
    else {
      eac = 1
      gcd = 1
      richness <- length(unique(df$occurrence.species_name))
      MaxLat <- max(df$paleolatdec)
      MinLat <- min(df$paleolatdec)
      MaxAbsLat <- max(abs(df$paleolatdec))
      MinAbsLat <- min(abs(df$paleolatdec))
      MeanAbsLat <- mean(abs(df$paleolatdec))
      occurrences <- length(df$paleolatdec)
      Ex <- max(df$Extinct.in.bin)
    }
    return(data.frame(occurrences, eac, gcd, richness, MaxAbsLat,
        MinAbsLat, MeanAbsLat, Ex))
  }

  #####  now apply it to the PBDB data
  byGenus.PBDB <- ddply(pbdb, .(stage, top, class,
      Group, occurrence.genus_name),ranges,
    .progress="text")
  colnames(byGenus.PBDB) <- c("Interval","top","class",
    "group","genus","occurrences","eac","gcd",
    "richness","MaxAbsLat","MinAbsLat","MeanAbsLat","Ex")
  write.table(byGenus.PBDB,"../data/PBDB.ranges.processed.csv", sep = ",")

  ####### now merge modern and paleo data#######

  data <- rbind(byGenus.OBIS,byGenus.PBDB)
  data$AbsLatRange <- data$MaxAbsLat - data$MinAbsLat
  data$class <- ifelse(data$class == "Decapoda","Malacostraca",data$class)
  saveRDS(data, file = "../data/modern_and_paleo_ranges.rds")
  # write.table(data,"~/Dropbox/nescent_extinction_map/data/Modern.and.Paleo.Ranges.csv",sep=",")
  #table(pbdb$family_name,pbdb$class)

#  table(data$Interval)
#  table(data$Interval,data$class)
  #exrate <- function(df) mean(df$Ex)
  #exrates <- ddply(data,.(top),each(exrate))

  ### compare modern and Plio-Pleistocene ranges
  #PlioPleis  <- drop.levels(subset(data,data$Interval=="Plio-Pleistocene"))
  #Modern <- drop.levels(subset(data,data$Interval=="Modern_raw"))

  #Plio.eac <- PlioPleis$AbsLatRange
  #Genus <- PlioPleis$genus
  #PlioPleis <- data.frame(Genus,Plio.eac)

  #Mod.eac <- Modern$AbsLatRange
  #Genus <- Modern$genus
  #Modern <- data.frame(Genus,Mod.eac)

  #plot.data <- merge(Modern,PlioPleis, by='Genus')
  #qplot(plot.data$Mod.eac,plot.data$Plio.eac) + geom_smooth(method="lm")
}
extract_ranges()
###Temporary code to make plots to check distributions


#d <- readRDS("../data/modern_and_paleo_ranges.rds")
#data <- d

#p <- ggplot(d,aes(richness+1,fill=class))
#p + geom_histogram() + facet_wrap(~Interval, scales="free") + scale_y_log10()


#means <- function(df) mean(df$Ex)
#number <-function(df) length(df$Ex)
#ExMeans <- ddply(data,.(Interval,class,eac),each(means,number))

#p <- ggplot(ExMeans,aes(log(eac),means,size=log(number),colour=Interval))
#p + geom_point() + facet_wrap(~class)

@
