<<merge-predictions-spatial-child>>=
# read in the modern genus-occupancy data:
load("../data/interpolated_provs_all_taxa.rda")
d.eco.filled <- interpolated_provs_all_taxa
# d.eco.filled <- droplevels(subset(d.eco.filled,
#     d.eco.filled$Ranges == "Interpolated"))
# d.eco.filled$Ranges <- NULL

# bring in the modern predictions:
modern <- readRDS("../data/modern-predictions.rds")

# create a version where we remove genera that occur in only one province:
d.eco.filled.no.singles <- plyr::ddply(d.eco.filled,
  "genus", function(x) {
  if(nrow(x) > 1) x
})

# merge occurrence data with risk predictions:
d.eco.filled <- merge(d.eco.filled, modern, by = "genus", all.x = FALSE)
d.eco.filled.no.singles <- merge(d.eco.filled.no.singles, modern, by = "genus", all.x = FALSE)

# for the text:
single.genera.provs.removed <- length(unique(d.eco.filled$genus)) - length(unique(d.eco.filled.no.singles$genus))
total.genera <- length(unique(d.eco.filled$genus))

# merge in raw predictors:
temp <- readRDS("../data/modern_and_paleo_ranges.rds")
temp <- subset(temp, Interval == "Modern_merged")
temp <- plyr::rename(temp, c("occurrences" = "raw_occurrences", "eac" = "raw_occupancy", "richness" = "raw_richness"))
d.eco.filled <- plyr::join(d.eco.filled, temp[,c("genus", "raw_occurrences", "raw_occupancy", "raw_richness")])

# remove prop_comp column which may be NA here:
# no longer needed:
d.eco.filled$prop_comp <- NULL

# and calculate mean values by class-province or for the provinces overall:
by.prov.classes <- plyr::ddply(na.omit(d.eco.filled), c("class", "PROV_CODE"),
  plyr::summarize,
  mean.ext = mean(log(mean_observed)),
  mean.ext.1.0 = mean(log(mean_observed_1.0)),
  mean.ext.sing = mean(log(mean_observed_sing)),
  median.ext = median(mean_observed),
  N.gen = length(unique(genus)),
  mean.occupancy = mean(occupancy), mean.occurrences = mean(occurrences),
  mean.min.lat = mean(min.lat), mean.max.lat = mean(max.lat),
  mean.mean.lat = mean(mean.lat), mean.gcd = mean(great.circle),
  mean.lat.range = mean(lat.range), mean.richness = mean(richness),
  mean.raw.occurrences = mean(raw_occurrences),
  mean.raw.occupancy = mean(raw_occupancy),
  mean.raw.richness = mean(raw_richness))

by.prov.all <- plyr::ddply(na.omit(d.eco.filled), "PROV_CODE",
  plyr::summarize,
  mean.ext = mean(log(mean_observed)),
  mean.ext.1.0 = mean(log(mean_observed_1.0)),
  mean.ext.sing = mean(log(mean_observed_sing)),
  median.ext = median(mean_observed), N.gen = length(unique(genus)),
  mean.occupancy = mean(occupancy), mean.occurrences = mean(occurrences),
  mean.min.lat = mean(min.lat), mean.max.lat = mean(max.lat),
  mean.mean.lat = mean(mean.lat), mean.gcd = mean(great.circle),
  mean.lat.range = mean(lat.range), mean.richness = mean(richness))

###
# Make versions with different culls based on OBIS sample numbers:
obis.culls <- c(1, 5, 10, 20, 50)
by.prov.classes.obis.culls <- list()
by.prov.all.obis.culls <- list()
for(i in seq_along(obis.culls)) {
  by.prov.classes.obis.culls[[i]] <- plyr::ddply(
    subset(d.eco.filled, obis_n >= obis.culls[i]),
    c("PROV_CODE", "class"), plyr::summarize,
    mean.ext = mean(log(mean_observed)),
    N.gen = length(unique(genus)))
  by.prov.all.obis.culls[[i]] <- plyr::ddply(
    subset(d.eco.filled, obis_n >= obis.culls[i]),
    "PROV_CODE", plyr::summarize,
    mean.ext = mean(log(mean_observed)),
    N.gen = length(unique(genus)))
  by.prov.all.obis.culls[[i]]$Halpern <- 1 # fake unused columns
  by.prov.all.obis.culls[[i]]$Burrows <- 1
}
###

# And a version without single-province taxa:
by.prov.classes.no.singles <- plyr::ddply(d.eco.filled.no.singles,
  c("PROV_CODE", "class"), plyr::summarize,
  mean.ext = mean(log(mean_observed)),
  N.gen = length(unique(genus)))

by.prov.all.no.singles <- plyr::ddply(d.eco.filled.no.singles,
  c("PROV_CODE"), plyr::summarize,
  mean.ext = mean(log(mean_observed)),
  N.gen = length(unique(genus)))
# fake columns that are needed but not used:
by.prov.all.no.singles$Halpern <- 1
by.prov.all.no.singles$Burrows <- 1

# A second version that takes the mean of the class means:
by.prov.all2 <- ddply(by.prov.classes, "PROV_CODE", plyr::summarize,
  mean.ext = mean(mean.ext))

# And another version that jackknifes out each class before getting
# the overall mean:

by.prov.all.jk <- list()

classes <- as.character(unique(by.prov.classes$class))
for(i in 1:length(classes)) {
  by.prov.all.jk[[i]] <- ddply(na.omit(subset(d.eco.filled, class != classes[i])), "PROV_CODE",
    plyr::summarize,
    mean.ext = mean(log(mean_observed + 0.001)), median.ext =
    median(mean_observed), N.gen = length(unique(genus)), mean.occupancy =
    mean(occupancy), mean.occurrences = mean(occurrences), mean.min.lat =
    mean(min.lat), mean.max.lat = mean(max.lat), mean.mean.lat =
    mean(mean.lat), mean.gcd = mean(great.circle), mean.lat.range =
    mean(lat.range), mean.richness = mean(richness))
  by.prov.all.jk[[i]]$class_jk <- classes[i]
  # fake:
  by.prov.all.jk[[i]]$Halpern <- 1
  by.prov.all.jk[[i]]$Burrows <- 1
}

# read in province area measurements and OBIS sampling data:
Prov.Areas <- read.csv("../data/spalding-province-areas.csv",
  header = TRUE, stringsAsFactors = FALSE)
Prov.Sampling <- read.csv("../data/obis.sampling.and.richness.csv",
  header = TRUE, stringsAsFactors = FALSE)
Prov.Sampling$class[Prov.Sampling$class == "Malacostraca"] <- "Decapoda"
Prov.Data <- merge(Prov.Sampling, Prov.Areas, by = c("Zone", "PROV_CODE"),
  all.x = TRUE)
by.prov.classes <- merge(by.prov.classes, Prov.Data,
  by = c("class", "PROV_CODE"))
by.prov.all <- merge(by.prov.all, Prov.Data, by = "PROV_CODE")

# read in Halpern et al. and Burrows et al. layers
Impacts <- read.csv("../data/Halpern_Burrows_by_Spalding.csv",
  header = TRUE)
Impacts <- data.frame(Impacts$PROV_CODE,
  scale(Impacts$Mean_Halpern_Province),
  scale(Impacts$Mean_Burrows_Province))
colnames(Impacts) <- c("PROV_CODE", "Halpern", "Burrows")
by.prov.all <- merge(by.prov.all, Impacts, by = "PROV_CODE")
by.prov.all <- droplevels(subset(by.prov.all, by.prov.all$class == "all"))
by.prov.classes <- merge(by.prov.classes, Impacts, by = "PROV_CODE")
by.prov.all$log_OBIS_records <- log(by.prov.all$OBIS_records)
by.prov.classes$log_OBIS_records <- log(by.prov.classes$OBIS_records)

by.prov.classes$Lat_Zone <- as.factor(ifelse(by.prov.classes$Zone ==
    "Tropical", "Tropical", "Extratropical"))
by.prov.all$Lat_Zone <- as.factor(ifelse(by.prov.all$Zone == "Tropical",
    "Tropical", "Extratropical"))

save(by.prov.classes, file = "../data/by.prov.classes.rda")
save(by.prov.all, file = "../data/by.prov.all.rda")
save(by.prov.all.jk, file = "../data/by.prov.all.jk.rda")
save(by.prov.classes.no.singles, file = "../data/by.prov.classes.no.singles.rda")
save(by.prov.all.no.singles, file = "../data/by.prov.all.no.singles.rda")
save(by.prov.classes.obis.culls, file = "../data/by.prov.classes.obis.culls.rda")
save(by.prov.all.obis.culls, file = "../data/by.prov.all.obis.culls.rda")
@
